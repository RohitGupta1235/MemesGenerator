{"ast":null,"code":"import _defineProperty from\"C:/Users/rohit/Desktop/Memes/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"C:/Users/rohit/Desktop/Memes/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"C:/Users/rohit/Desktop/Memes/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/rohit/Desktop/Memes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/rohit/Desktop/Memes/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";//simport memesData  from \"../memesData\"\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Meme(){/**\r\n   * Challenge:\r\n   * 1. Set up the text inputs to save to\r\n   *    the `topText` and `bottomText` state variables.\r\n   * 2. Replace the hard-coded text on the image with\r\n   *    the text being saved to state.\r\n   */var _React$useState=React.useState({topText:\"\",bottomText:\"\",randomImage:\"http://i.imgflip.com/1bij.jpg\"}),_React$useState2=_slicedToArray(_React$useState,2),meme=_React$useState2[0],setMeme=_React$useState2[1];var _React$useState3=React.useState([]),_React$useState4=_slicedToArray(_React$useState3,2),allMemes=_React$useState4[0],setAllMemes=_React$useState4[1];React.useEffect(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var res,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.imgflip.com/get_memes\");case 2:res=_context.sent;_context.next=5;return res.json();case 5:data=_context.sent;setAllMemes(data.data.memes);case 7:case\"end\":return _context.stop();}}},_callee);})),[]);function getMemeImage(){var randomNumber=Math.floor(Math.random()*allMemes.length);var url=allMemes[randomNumber].url;setMeme(function(prevMeme){return _objectSpread(_objectSpread({},prevMeme),{},{randomImage:url});});}function handleChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setMeme(function(prevMeme){return _objectSpread(_objectSpread({},prevMeme),{},_defineProperty({},name,value));});}return/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Top text\",className:\"form--input\",name:\"topText\",value:meme.topText,onChange:handleChange}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Bottom text\",className:\"form--input\",name:\"bottomText\",value:meme.bottomText,onChange:handleChange}),/*#__PURE__*/_jsx(\"button\",{className:\"form--button\",onClick:getMemeImage,children:\"Get a new meme image \\uD83D\\uDDBC\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"meme\",children:[/*#__PURE__*/_jsx(\"img\",{src:meme.randomImage,className:\"meme--image\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"meme--text top\",children:meme.topText}),/*#__PURE__*/_jsx(\"h2\",{className:\"meme--text bottom\",children:meme.bottomText})]}),/*#__PURE__*/_jsx(\"div\",{className:\"p\"})]});}","map":{"version":3,"names":["React","Meme","useState","topText","bottomText","randomImage","meme","setMeme","allMemes","setAllMemes","useEffect","fetch","res","json","data","memes","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","target","name","value"],"sources":["C:/Users/rohit/Desktop/Memes/src/components/Meme.js"],"sourcesContent":["import React from \"react\";\r\n//simport memesData  from \"../memesData\"\r\n\r\nexport default function Meme() {\r\n  /**\r\n   * Challenge:\r\n   * 1. Set up the text inputs to save to\r\n   *    the `topText` and `bottomText` state variables.\r\n   * 2. Replace the hard-coded text on the image with\r\n   *    the text being saved to state.\r\n   */\r\n\r\n  const [meme, setMeme] = React.useState({\r\n    topText: \"\",\r\n    bottomText: \"\",\r\n    randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n  });\r\n  const [allMemes, setAllMemes] = React.useState([]);\r\n\r\n  React.useEffect(async () => {\r\n    const res = await fetch(\"https://api.imgflip.com/get_memes\");\r\n    const data = await res.json();\r\n    setAllMemes(data.data.memes);\r\n  }, []);\r\n\r\n  function getMemeImage() {\r\n    const randomNumber = Math.floor(Math.random() * allMemes.length);\r\n    const url = allMemes[randomNumber].url;\r\n    setMeme((prevMeme) => ({\r\n      ...prevMeme,\r\n      randomImage: url,\r\n    }));\r\n  }\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n    setMeme((prevMeme) => ({\r\n      ...prevMeme,\r\n      [name]: value,\r\n    }));\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Top text\"\r\n          className=\"form--input\"\r\n          name=\"topText\"\r\n          value={meme.topText}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Bottom text\"\r\n          className=\"form--input\"\r\n          name=\"bottomText\"\r\n          value={meme.bottomText}\r\n          onChange={handleChange}\r\n        />\r\n        <button className=\"form--button\" onClick={getMemeImage}>\r\n          Get a new meme image ðŸ–¼\r\n        </button>\r\n      </div>\r\n      <div className=\"meme\">\r\n        <img src={meme.randomImage} className=\"meme--image\" />\r\n        <h2 className=\"meme--text top\">{meme.topText}</h2>\r\n        <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\r\n      </div>\r\n      <div className=\"p\"></div>\r\n    </main>\r\n  );\r\n}\r\n"],"mappings":"2kBAAA,MAAOA,MAAK,KAAM,OAAO,CACzB;AAAA,wFAEA,cAAe,SAASC,KAAI,EAAG,CAC7B;AACF;AACA;AACA;AACA;AACA;AACA,KAEE,oBAAwBD,KAAK,CAACE,QAAQ,CAAC,CACrCC,OAAO,CAAE,EAAE,CACXC,UAAU,CAAE,EAAE,CACdC,WAAW,CAAE,+BACf,CAAC,CAAC,oDAJKC,IAAI,qBAAEC,OAAO,qBAKpB,qBAAgCP,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC,qDAA3CM,QAAQ,qBAAEC,WAAW,qBAE5BT,KAAK,CAACU,SAAS,wEAAC,wKACIC,MAAK,CAAC,mCAAmC,CAAC,QAAtDC,GAAG,qCACUA,IAAG,CAACC,IAAI,EAAE,QAAvBC,IAAI,eACVL,WAAW,CAACK,IAAI,CAACA,IAAI,CAACC,KAAK,CAAC,CAAC,sDAC9B,GAAE,EAAE,CAAC,CAEN,QAASC,aAAY,EAAG,CACtB,GAAMC,aAAY,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,CAAGZ,QAAQ,CAACa,MAAM,CAAC,CAChE,GAAMC,IAAG,CAAGd,QAAQ,CAACS,YAAY,CAAC,CAACK,GAAG,CACtCf,OAAO,CAAC,SAACgB,QAAQ,wCACZA,QAAQ,MACXlB,WAAW,CAAEiB,GAAG,IAChB,CAAC,CACL,CAEA,QAASE,aAAY,CAACC,KAAK,CAAE,CAC3B,kBAAwBA,KAAK,CAACC,MAAM,CAA5BC,IAAI,eAAJA,IAAI,CAAEC,KAAK,eAALA,KAAK,CACnBrB,OAAO,CAAC,SAACgB,QAAQ,wCACZA,QAAQ,wBACVI,IAAI,CAAGC,KAAK,IACb,CAAC,CACL,CAEA,mBACE,qCACE,aAAK,SAAS,CAAC,MAAM,wBACnB,cACE,IAAI,CAAC,MAAM,CACX,WAAW,CAAC,UAAU,CACtB,SAAS,CAAC,aAAa,CACvB,IAAI,CAAC,SAAS,CACd,KAAK,CAAEtB,IAAI,CAACH,OAAQ,CACpB,QAAQ,CAAEqB,YAAa,EACvB,cACF,cACE,IAAI,CAAC,MAAM,CACX,WAAW,CAAC,aAAa,CACzB,SAAS,CAAC,aAAa,CACvB,IAAI,CAAC,YAAY,CACjB,KAAK,CAAElB,IAAI,CAACF,UAAW,CACvB,QAAQ,CAAEoB,YAAa,EACvB,cACF,eAAQ,SAAS,CAAC,cAAc,CAAC,OAAO,CAAER,YAAa,+CAE9C,GACL,cACN,aAAK,SAAS,CAAC,MAAM,wBACnB,YAAK,GAAG,CAAEV,IAAI,CAACD,WAAY,CAAC,SAAS,CAAC,aAAa,EAAG,cACtD,WAAI,SAAS,CAAC,gBAAgB,UAAEC,IAAI,CAACH,OAAO,EAAM,cAClD,WAAI,SAAS,CAAC,mBAAmB,UAAEG,IAAI,CAACF,UAAU,EAAM,GACpD,cACN,YAAK,SAAS,CAAC,GAAG,EAAO,GACpB,CAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}